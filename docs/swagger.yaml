definitions:
  organizations.Entity:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  positions.CreateDTO:
    properties:
      name:
        type: string
    type: object
  positions.Entity:
    properties:
      id:
        type: integer
      manager_id:
        type: integer
      name:
        type: string
    type: object
  positions.UpdateDTO:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  users.AttachDTO:
    properties:
      id:
        type: integer
      organization_id:
        type: integer
      position_id:
        type: integer
    type: object
  users.CreateDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  users.CredsDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  users.Entity:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      position_id:
        type: integer
      role:
        type: string
    type: object
  users.LoginResponseDTO:
    properties:
      access_token:
        type: string
    type: object
  users.UpdateSelfDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  users.ViewDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      organizations:
        type: string
      positions:
        type: string
    type: object
info:
  contact: {}
  title: BeeShifts-Server API
paths:
  /login:
    post:
      description: Returns API token by credentials (password should be hashed).
      parameters:
      - description: CredsDTO JSON
        in: body
        name: CredsDTO
        required: true
        schema:
          $ref: '#/definitions/users.CredsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.LoginResponseDTO'
      summary: Get API token
      tags:
      - users
  /organizations:
    get:
      parameters:
      - collectionFormat: multi
        description: Organization id
        in: query
        items:
          type: integer
        name: id
        type: array
      - collectionFormat: multi
        description: Organization name
        in: query
        items:
          type: string
        name: name
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/organizations.Entity'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get organizations
      tags:
      - organizations
  /positions:
    get:
      parameters:
      - collectionFormat: multi
        description: Position id
        in: query
        items:
          type: integer
        name: id
        type: array
      - collectionFormat: multi
        description: Manager id
        in: query
        items:
          type: integer
        name: manager_id
        type: array
      - collectionFormat: multi
        description: Position name
        in: query
        items:
          type: string
        name: name
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/positions.Entity'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get positions
      tags:
      - positions
    post:
      parameters:
      - description: Position JSON
        in: body
        name: Position
        required: true
        schema:
          $ref: '#/definitions/positions.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/positions.Entity'
      security:
      - ApiKeyAuth: []
      summary: Create new position
      tags:
      - positions
    put:
      parameters:
      - description: Position to update JSON
        in: body
        name: Position
        required: true
        schema:
          $ref: '#/definitions/positions.UpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/positions.Entity'
      security:
      - ApiKeyAuth: []
      summary: Update position
      tags:
      - positions
  /sign_up:
    post:
      parameters:
      - description: User JSON
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/users.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.ViewDTO'
      summary: Create new user
      tags:
      - users
  /users:
    get:
      parameters:
      - collectionFormat: multi
        description: User id
        in: query
        items:
          type: integer
        name: id
        type: array
      - collectionFormat: multi
        description: Organization id
        in: query
        items:
          type: integer
        name: organization_id
        type: array
      - collectionFormat: multi
        description: Position id
        in: query
        items:
          type: integer
        name: position_id
        type: array
      - collectionFormat: multi
        description: User's first name
        in: query
        items:
          type: string
        name: first_name
        type: array
      - collectionFormat: multi
        description: User's last name
        in: query
        items:
          type: string
        name: last_name
        type: array
      - collectionFormat: multi
        description: User's email
        in: query
        items:
          type: string
        name: email
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.ViewDTO'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - users
    put:
      parameters:
      - description: Data for users attachment JSON
        in: body
        name: AttachUserInfo
        required: true
        schema:
          $ref: '#/definitions/users.AttachDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.Entity'
      security:
      - ApiKeyAuth: []
      summary: Attach user to organization and set position
      tags:
      - users
  /users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ViewDTO'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - users
    put:
      parameters:
      - description: User to update JSON
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/users.UpdateSelfDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.Entity'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
